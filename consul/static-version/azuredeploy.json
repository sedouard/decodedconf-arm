{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#", 
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string", 
      "metadata": {
        "description": "Admin username for VM"
      }
    },
    "sshKeyData": {
      "type": "string", 
      "metadata": {
        "description": "SSH Public key for VMs"
      }
    }, 
    "vmSize": {
      "defaultValue": "Standard_A1", 
      "metadata": {
        "description": "Size of the Virtual Machine."
      }, 
      "type": "string", 
      "allowedValues": [
        "Standard_A1", 
        "Standard_A2", 
        "Standard_A3", 
        "Standard_D1_v2", 
        "Standard_D2_v2", 
        "Standard_D3_v2"
      ]
    },
    "appPrefix": {
      "type": "string", 
      "metadata": {
        "description": "Prefix for each component (VMs, networks, etc)"
      },
      "maxLength": 11
    }, 
    "existingAtlasToken": {
      "type": "string", 
      "metadata": {
        "description": "Your existing access token from Atlas"
      }
    }, 
    "existingAtlasInfraName": {
      "type": "string", 
      "metadata": {
        "description": "The name of your existing infrastructure in Atlas (username/infraName)"
      }
    }
  },
  "variables": {
    "imagePublisher": "Canonical", 
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetIDRef'))]", 
    "subnet1Name": "Subnet-1", 
    "customScriptFilePath": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/consul-on-ubuntu/install-consul.sh", 
    "vmStorageAccountContainerName": "vhds", 
    "addressPrefix": "10.0.0.0/16", 
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/', variables('subnet1Name'))]", 
    "numberOfInstances": 3, 
    "apiVersion": "2015-06-15", 
    "customScriptCommandToExecute": "bash install-consul.sh", 
    "subnet1Prefix": "10.0.0.0/24", 
    "publicIPAddressType": "Dynamic", 
    "imageSKU": "14.04.3-LTS", 
    "vnetIDRef": "[concat(parameters('appPrefix'),'_VNET')]", 
    "imageOffer": "UbuntuServer", 
    "storageAccountName": "[concat(uniqueString(resourceGroup().id), parameters('appPrefix'))]",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]"
  },  
  "resources": [
    {
      "properties": {
        "accountType": "Standard_LRS"
      }, 
      "type": "Microsoft.Storage/storageAccounts", 
      "location": "[resourceGroup().location]", 
      "apiVersion": "[variables('apiVersion')]", 
      "name": "[variables('storageAccountName')]"
    },
    {
      "properties": {}, 
      "type": "Microsoft.Compute/availabilitySets", 
      "location": "[resourceGroup().location]", 
      "apiVersion": "[variables('apiVersion')]", 
      "name": "[concat(parameters('appPrefix'),'_AS')]"
    }, 
    {
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule", 
            "properties": {
              "priority": 100, 
              "direction": "Inbound", 
              "protocol": "Tcp", 
              "description": "Allow external SSH", 
              "access": "Allow", 
              "destinationPortRange": "22", 
              "sourcePortRange": "*", 
              "destinationAddressPrefix": "*", 
              "sourceAddressPrefix": "Internet"
            }
          }
        ]
      }, 
      "type": "Microsoft.Network/networkSecurityGroups", 
      "location": "[resourceGroup().location]", 
      "apiVersion": "[variables('apiVersion')]", 
      "name": "[concat(parameters('appPrefix'),'_SG')]"
    }, 
    {
      "name": "[concat(parameters('appPrefix'),'_VNET')]", 
      "apiVersion": "[variables('apiVersion')]", 
      "location": "[resourceGroup().location]", 
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('appPrefix'),'_SG')]"
      ], 
      "type": "Microsoft.Network/virtualNetworks", 
      "properties": {
        "subnets": [
          {
            "name": "[variables('subnet1Name')]", 
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          }
        ], 
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        }
      }
    }, 
    {
      "name": "[concat(parameters('appPrefix'),'_LB')]", 
      "apiVersion": "[variables('apiVersion')]", 
      "location": "[resourceGroup().location]", 
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('appPrefix'),'_VNET')]"
      ], 
      "type": "Microsoft.Network/loadBalancers", 
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "loadBalancerFrontEnd", 
            "properties": {
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              }
            }
          }
        ], 
        "loadBalancingRules": [
          {
            "name": "lbrule", 
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('appPrefix'),'_LB')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
              }, 
              "backendPort": 8500, 
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('appPrefix'),'_LB')), '/probes/lbprobe')]"
              }, 
              "protocol": "Tcp", 
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('appPrefix'),'_LB')), '/backendAddressPools/loadBalancerBackEnd')]"
              }, 
              "frontendPort": 8500, 
              "idleTimeoutInMinutes": 15
            }
          }
        ], 
        "backendAddressPools": [
          {
            "name": "loadBalancerBackEnd"
          }
        ], 
        "probes": [
          {
            "name": "lbprobe", 
            "properties": {
              "protocol": "Tcp", 
              "numberOfProbes": 2, 
              "intervalInSeconds": 15, 
              "port": 8500
            }
          }
        ]
      }
    }, 
    {
      "name": "[concat(parameters('appPrefix'),'_nic1', '0')]", 
      "apiVersion": "[variables('apiVersion')]", 
      "location": "[resourceGroup().location]", 
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', 'publicIP', '0')]", 
        "[concat('Microsoft.Network/virtualNetworks/', parameters('appPrefix'),'_VNET')]", 
        "[concat('Microsoft.Network/loadBalancers/', parameters('appPrefix'),'_LB')]"
      ],
      "type": "Microsoft.Network/networkInterfaces", 
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(parameters('appPrefix'),'_SG'))]"
        }, 
        "ipConfigurations": [
          {
            "name": "ipconfig1", 
            "properties": {
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              }, 
              "privateIPAllocationMethod": "Dynamic", 
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('appPrefix'),'_LB')),'/backendAddressPools/loadBalancerBackEnd')]"
                }
              ], 
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', concat('publicIP', '0'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(parameters('appPrefix'),'_nic1', '1')]", 
      "apiVersion": "[variables('apiVersion')]", 
      "location": "[resourceGroup().location]", 
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', 'publicIP', '1')]", 
        "[concat('Microsoft.Network/virtualNetworks/', parameters('appPrefix'),'_VNET')]", 
        "[concat('Microsoft.Network/loadBalancers/', parameters('appPrefix'),'_LB')]"
      ],
      "type": "Microsoft.Network/networkInterfaces", 
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(parameters('appPrefix'),'_SG'))]"
        }, 
        "ipConfigurations": [
          {
            "name": "ipconfig1", 
            "properties": {
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              }, 
              "privateIPAllocationMethod": "Dynamic", 
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('appPrefix'),'_LB')),'/backendAddressPools/loadBalancerBackEnd')]"
                }
              ], 
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', concat('publicIP', '1'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(parameters('appPrefix'),'_nic1', '2')]", 
      "apiVersion": "[variables('apiVersion')]", 
      "location": "[resourceGroup().location]", 
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', 'publicIP', '2')]", 
        "[concat('Microsoft.Network/virtualNetworks/', parameters('appPrefix'),'_VNET')]", 
        "[concat('Microsoft.Network/loadBalancers/', parameters('appPrefix'),'_LB')]"
      ],
      "type": "Microsoft.Network/networkInterfaces", 
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(parameters('appPrefix'),'_SG'))]"
        }, 
        "ipConfigurations": [
          {
            "name": "ipconfig1", 
            "properties": {
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              }, 
              "privateIPAllocationMethod": "Dynamic", 
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('appPrefix'),'_LB')),'/backendAddressPools/loadBalancerBackEnd')]"
                }
              ], 
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', concat('publicIP', '2'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(parameters('appPrefix'), '_vm', '0')]", 
      "apiVersion": "[variables('apiVersion')]", 
      "location": "[resourceGroup().location]", 
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('appPrefix'),'_nic1', '0']", 
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]", 
        "[concat('Microsoft.Compute/availabilitySets/', parameters('appPrefix'),'_AS')]"
      ], 
      "type": "Microsoft.Compute/virtualMachines", 
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        }, 
        "osProfile": {
          "computerName": "[concat('vm', '0')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(parameters('appPrefix'),'_AS'))]"
        }, 
        "storageProfile": {
          "imageReference": {
            "sku": "[variables('imageSKU')]", 
            "publisher": "[variables('imagePublisher')]", 
            "version": "latest", 
            "offer": "[variables('imageOffer')]"
          }, 
          "osDisk": {
            "caching": "ReadWrite", 
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/','osdisk', '0', '.vhd')]"
            }, 
            "createOption": "FromImage", 
            "name": "osdisk"
          }
        }, 
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('appPrefix'),'_nic1', '0'))]", 
              "properties": {
                "primary": true
              }
            }
          ]
        }
      }
    },
    {
      "name": "[concat(parameters('appPrefix'), '_vm', '1')]", 
      "apiVersion": "[variables('apiVersion')]", 
      "location": "[resourceGroup().location]", 
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('appPrefix'),'_nic1', '1')]", 
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]", 
        "[concat('Microsoft.Compute/availabilitySets/', parameters('appPrefix'),'_AS')]"
      ], 
      "type": "Microsoft.Compute/virtualMachines", 
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        }, 
        "osProfile": {
          "computerName": "[concat('vm', '1')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(parameters('appPrefix'),'_AS'))]"
        }, 
        "storageProfile": {
          "imageReference": {
            "sku": "[variables('imageSKU')]", 
            "publisher": "[variables('imagePublisher')]", 
            "version": "latest", 
            "offer": "[variables('imageOffer')]"
          }, 
          "osDisk": {
            "caching": "ReadWrite", 
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/','osdisk', '1', '.vhd')]"
            }, 
            "createOption": "FromImage", 
            "name": "osdisk"
          }
        }, 
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('appPrefix'),'_nic1', '1'))]", 
              "properties": {
                "primary": true
              }
            }
          ]
        }
      }
    },
    {
      "name": "[concat(parameters('appPrefix'), '_vm', '2')]", 
      "apiVersion": "[variables('apiVersion')]", 
      "location": "[resourceGroup().location]", 
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('appPrefix'),'_nic1', '2')]", 
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]", 
        "[concat('Microsoft.Compute/availabilitySets/', parameters('appPrefix'),'_AS')]"
      ], 
      "type": "Microsoft.Compute/virtualMachines", 
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        }, 
        "osProfile": {
          "computerName": "[concat('vm', '2')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(parameters('appPrefix'),'_AS'))]"
        }, 
        "storageProfile": {
          "imageReference": {
            "sku": "[variables('imageSKU')]", 
            "publisher": "[variables('imagePublisher')]", 
            "version": "latest", 
            "offer": "[variables('imageOffer')]"
          }, 
          "osDisk": {
            "caching": "ReadWrite", 
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/','osdisk', '2', '.vhd')]"
            }, 
            "createOption": "FromImage", 
            "name": "osdisk"
          }
        }, 
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('appPrefix'),'_nic1', '2'))]", 
              "properties": {
                "primary": true
              }
            }
          ]
        }
      }
    }
  ]
}
